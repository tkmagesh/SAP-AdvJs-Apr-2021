Magesh Kuppan

Name
Primary Skillset
Experience in JavaScript

Methodolgy

Schedule
    Session 1 - 1:30 Hrs
    Tea Break - 10 Mins
    Session 2 - 1:30 Hrs
    Lunch Break - 40 Mins
    Session 3 - 1:30 Hrs
    Tea Break - 10 Mins
    Session 4 - 1:30 Hrs

Repository

CoffeeScript
TypeScript
Script#

ES5
ES6 (ES2015/ESNext/ECMAScript6)

ES5
    DataTypes
        number, string, boolean
        undefined, object, function

    Programming Constructs
        var, if else, switch case, for, for in, while, try catch finally, throw, function

    APIs
        Date, Array, Math, RegEx, Error, timer (setTimeout, clearTimeout, setInterval, clearInterval)

    Unique Aspects

Line Oriented
Procedural 
Object Based 
Object Oriented
Functional
    Functions are first class citizens (like data)
        Functions can be created like objects
        Functions can have attributes like objects
        Functions can have methods like objects
        Higher Order Functions
            Functions can be passed as arguments to other functions (like objects)
            Functions can be returned as return value from other functions (like objects)
        Functions are variadic
    Functions are called as "callable objects"


static
dynamic

strongly typed
loosely typed


add(10,20)
add(10,"20")
add(10, "abc")
add([10,20],[30,40])
add([10,20],[30,"40"])
add([10,20],[30,"abc"])
add([10,20],[30,[40,"abc"]])
add(funtion(){ return 10;}, function(){ return 20;})
add(function(){ return [10,20];}, function(){ return [30,[40,"abc"]]})
add(10)
add()
add(10,20,30,40,50)
add([function(){ return [10,20];}, function(){ return [30,[40,"abc"]]}])

function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number')
        throw new Error('Invalid argument(s)!')
    return x + y;
}

jQuery(domNode)
jQuery([dn1, dn2])
jQuery(string)
jQuery(fn) => shortcut of jQuery(document).ready(fn)
jQuery(jQueryObj)

jasmine (BDD framework)
    describe (test class), it (test case), expect (assert)

describe("A Calculator", function(){
    it("Should add 2 numbers", function(){
        //Arrange
            var n1 = 10,
                n2 = 20,
                expectedResult = 30;

        //Act
            var actualResult = add(n1, n2);

        //Assert
            expect(actualResult).toBe(expectedResult);
    });
})

Implicit values in function
    - this
    - arguments
        array like object containing all the arguments passed to the function
            arguments.length
            arguments[index]

In JavaScript
    It doesnot matter WHERE the function is (or) WHO owns the function
    What matters is HOW the function is invoked!!

Function invocation patterns (6 ways)
    When a function is invoked as a method of an object(obj)
        this -> obj
    When a function is invoked as a 'function'
        this -> global (window)
    Using the 'call' method of the function
    Using the 'apply' method of the function
    As an 'Immediately Invoked Function Expression' - IIFE
    Using the 'new' keyword (constructor function)

Memoziation
    A technique by which the result of the function is memorized to avoid invocation repeatedly

Pure functions
    A function is called as a pure function if the invocation of the function can be replaced by the result of the function without affecting the final outcome.

    A function without side effects

Constructor Functions
    Invoked with a 'new' keyword
        => this -> new object
        => this -> returned by default

Inheritance (Prototypal Inheritance)
    Prototype Hopping
        The process by which the runtime resolves an attribute by tracing the __proto__ chain
        - Happens only when an attribute value is 'READ'
        - This doesn't happen when a new value is 'WRITTEN'

DONOT use __proto__ in your code
    1. Then, why is it accessible?
            Coz, Hiding something is costly in JavaScript
            Why?
    2. How do we access the base object?
        Constructor.prototype

ES6 (ES2015 / ESNext/ ECMAScript6)
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. default arguments
10. arrow functions
        /*
            //function statement
            function add(x,y){
                return x + y;
            }

            //function expression
            var add = function(x,y){
                return x + y;
            }

            var add = (x,y) => {
                return x + y;
            }
            */
            var add = (x,y) => x + y;
11. Symbols
12. Classes & Inheritance
    class Employee{
        id = 0;
        name = '';
        salary = 0;

        constructor(id, name, salary){
            this.id = id;
            this.name = name;
            this.salary = salary;
        }

        display(){
            console.log(`Id = ${this.id}, name = ${this.name} and salary = ${this.salary}`)
        }
    }
    
    class FulltimeEmployee extends Employee{
        benefits = '';
        constructor(id, name, salary, benefits){
            super(id, name, salary);
            this.benefits = benefits;
        }
    }

13. Template strings
14. Iterables
    For Arrays:
        var nos = [3,1,4,2,5]
        =======
        var iter = nos[Symbol.iterator]()
        while(true){
            var item = iter.next();
            if (item.done)
                break;
            console.log(item.value);
        }
        ======
        for(let no of nos){
            console.log(no)
        }

    For custom objects:
    let range = {
        from : 1,
        to : 5,
        [Symbol.Iterator] = function(){
            return {
                current : this.from,
                last : this.to,
                next(){
                    if (this.current <= this.last){
                        return { done : false, value : this.current++}
                    } else {
                        return { done : true }
                    }
                }
            };
        }
    }

15. generator functions   
        Suspend and resume the execution of a function

    function *getNos(){
        yield 10;
        yield 20;
        yield 30;
        yield 40;
    }
    var iter = getNos()

16. globalThis
17. null coalescing operator

JavaScript Modules
    CommonJS (node.js)
    AMD (Asynchronous Module Definition) - require.js
        require('moduleName', [dep1, dep2], function(dep1, dep2){
            return {
                name
            };
        });
    ES6 MODULES

Truthy & Falsy
    If the boolean equivalent of a value is true -> Truthy (all values except falsy values)
    If the boolean equivalent of a value is false -> Falsy (0, '', null, undefined, NaN, false)


Async Operation
    An operation that is initiated but not waited for its completion